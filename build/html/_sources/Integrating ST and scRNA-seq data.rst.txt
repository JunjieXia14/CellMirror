Integrating ST adn scRNA-seq Data
=================================

In this tutorial, we show how to apply ``CellMirror`` to integrate ST and scRNA-seq data.
As an example, we use the ST data and paired scRNA-seq data of breast cancer patient CID44971 from `Wu, et al. 2021. <https://www.nature.com/articles/s41588-021-00911-1>`_,
including 1,162 spots and 7,986 cells.

********************************
Step0: Loading packages (Python)
********************************

.. code-block:: python
    :linenos:

    import math
    import random
    import pandas as pd
    import numpy as np
    import scanpy as sc
    import datetime

    from CellMirror_utils.utilities import *
    from CellMirror_utils.layers import *
    from CellMirror_utils.cLDVAE_torch import *
    import torch.utils.data as data_utils

    parser = parameter_setting()
    args = parser.parse_known_args()[0]

    args.batch_size = 128
    args.lr_cLDVAE = 6e-6
    args.beta = 0.2

    np.random.seed(args.seed)
    random.seed(args.seed)
    torch.manual_seed(args.seed)
    torch.cuda.manual_seed(args.seed)

**********************************************
Step1: Reading and preprocessing data (Python)
**********************************************

.. code-block:: python
    :linenos:

    result = load_single_cell_spatial_data()

    singleCell_obj = result['singleCell_obj_CID44971']
    singleCell_obj.obs['type'] = 'SingleCell'
    spatial_obj = result['spatial_obj_CID44971']
    spatial_obj.obs['type'] = 'Spatial'

    sc.pp.normalize_total(singleCell_obj, inplace=True)
    sc.pp.log1p(singleCell_obj)
    sc.pp.highly_variable_genes(singleCell_obj, flavor='seurat', n_top_genes=3000)

    sc.pp.normalize_total(spatial_obj, inplace=True)
    sc.pp.log1p(spatial_obj)
    sc.pp.highly_variable_genes(spatial_obj, flavor='seurat', n_top_genes=3000)

    common_HVGs=np.intersect1d(list(singleCell_obj.var.index[singleCell_obj.var['highly_variable']]),list(spatial_obj.var.index[spatial_obj.var['highly_variable']])).tolist()

    singleCell_obj, spatial_obj = singleCell_obj[:,common_HVGs], spatial_obj[:,common_HVGs]
    genes_info = singleCell_obj.var

    target_obj_X_df = pd.DataFrame(spatial_obj.X.todense(), index=spatial_obj.obs.index, columns=genes_info.index)
    target_scale = np.concatenate( (target_obj_X_df.values, np.random.multivariate_normal(np.mean(target_obj_X_df, axis=0), np.cov(target_obj_X_df.T), len(background_obj_X_df)-len(target_obj_X_df))), axis=0)

    background_obj_X_df = pd.DataFrame(singleCell_obj.X.todense(), index=singleCell_obj.obs.index, columns=genes_info.index)
    background_scale = background_obj_X_df.values


*************************************
Step2: Training cLDVAE model (Python)
*************************************

.. code-block:: python
    :linenos:

    background = (background_scale).astype('float32')

    target = (target_scale).astype('float32')

    train = data_utils.TensorDataset(torch.from_numpy(target),torch.from_numpy(background))
    train_loader = data_utils.DataLoader(train, batch_size=batch_size, shuffle=True)

    total = data_utils.TensorDataset(torch.from_numpy(target),torch.from_numpy(background))
    total_loader = data_utils.DataLoader(total, batch_size=batch_size, shuffle=False)

    input_dim=len(genes_info)
    intermediate_dim_en=[200]
    intermediate_dim_de=[200]

    s_latent_dim = 6
    z_latent_dim = 50

    salient_colnames = list(range(1, s_latent_dim + 1))
    for sColumn in range(s_latent_dim):
        salient_colnames[sColumn] = "s" + str(salient_colnames[sColumn])
    irrelevant_colnames = list(range(1, z_latent_dim + 1))
    for iColumn in range(z_latent_dim):
        irrelevant_colnames[iColumn] = "z" + str(irrelevant_colnames[iColumn])

    n = singleCell_obj.X.shape[0]
    args.last_batch_size = n - int(n/batch_size)*batch_size

    model_cLDVAE = cLDVAE(args=args, 
                        n_input = input_dim, 
                        n_hidden_en = intermediate_dim_en, n_hidden_de = intermediate_dim_de, 
                        n_latent_s = s_latent_dim, n_latent_z = z_latent_dim)

    if args.use_cuda:
        model_cLDVAE.cuda()

    history = model_cLDVAE.fit(train_loader, total_loader)

*************************************
Step3: Saving cLDVAE outputs (Python)
*************************************

.. code-block:: python
    :linenos:

    outputs = model_cLDVAE.predict(total_loader)

    tg_z_output = outputs['tg_z_outputs']
    noContamination_output = pd.DataFrame(tg_z_output[:len(spatial_obj.obs), :], index=spatial_obj.obs.index, columns=irrelevant_colnames)
    noContamination_output.to_csv('spatial_data_CID44971_cLDVAE_only.csv')

    bg_z_output = outputs['bg_z_outputs']
    bg_output = pd.DataFrame(bg_z_output, index=singleCell_obj.obs.index, columns=irrelevant_colnames)
    bg_output.to_csv('singleCell_data_CID44971_cLDVAE_only.csv')

    singleCell_spatial_dist_cLDVAE = pd.DataFrame( np.corrcoef(bg_output, noContamination_output)[:len(bg_output), -len(noContamination_output):], index=singleCell_obj.obs.index, columns=spatial_obj.obs.index )

    spatial_singleCell_class_cLDVAE = []
    for spatialT in singleCell_spatial_dist_cLDVAE.columns:
        spatial_singleCell_class_cLDVAE.append( ( singleCell_obj.obs.loc[ singleCell_spatial_dist_cLDVAE[spatialT].sort_values(ascending=False).index[:20] ]['celltype_major'].value_counts( ascending=False) / 20 ).astype(str).apply(lambda x: x+'0' if len(x)<4 else x).to_dict() )

    spatial_obj.obs['celltype_major'] = spatial_singleCell_class_cLDVAE

    cLDVAE_only_obj = sc.AnnData( pd.concat([bg_output, noContamination_output], axis = 0), pd.concat([singleCell_obj.obs, spatial_obj.obs], axis=0), pd.DataFrame(irrelevant_colnames,index=irrelevant_colnames) )
    sc.pp.neighbors(cLDVAE_only_obj, n_neighbors=20, metric='correlation',use_rep='X')
    sc.tl.umap(cLDVAE_only_obj,min_dist=0.5)
    cLDVAE_only_obj.obs = cLDVAE_only_obj.obs.merge(cLDVAE_only_obj.obsm.to_df()[['X_umap1','X_umap2']], how='inner', left_index=True, right_index=True)
    cLDVAE_only_obj.obs.to_csv(f'en_nodes{intermediate_dim_en}_de_nodes{intermediate_dim_de}_spatial_scRNA_CID44971_ann_cLDVAE_only_s_dim{s_latent_dim}_z_dim{z_latent_dim}_lr{args.lr_cLDVAE}_beta{args.beta}_gamma{args.gamma}_bs{args.batch_size}_epoch_at{epoch}_time{datetime.datetime.now()}.csv')

    tg_s_output = outputs["tg_s_outputs"]
    tg_s_output = pd.DataFrame(tg_s_output[:len(spatial_obj.obs), :], index=spatial_obj.obs.index, columns=salient_colnames)
    tg_s_output.to_csv(f"CID44971_cLDVAE_only_spatial_salient_features_lr{args.lr_cLDVAE}_beta{args.beta}_gamma{args.gamma}_bs{args.batch_size}_s_dim{s_latent_dim}_z_dim{z_latent_dim}_time{datetime.datetime.now()}.csv")

    s_loadings_output = model_cLDVAE.get_loadings()[:,-(s_latent_dim):]
    s_loadings_output = pd.DataFrame(s_loadings_output, index=genes_info.index, columns=salient_colnames)
    s_loadings_output.to_csv(f"CID44971_cLDVAE_only_salient_loadings_matrix_lr{args.lr_cLDVAE}_beta{args.beta}_gamma{args.gamma}_bs{args.batch_size}_time{datetime.datetime.now()}.csv")


*************************************************
Step4: Implementing MNN on the processed data (R)
*************************************************

.. code-block:: R
    :linenos:

    library(here)
    library(magrittr)
    library(tidyverse)
    source(here::here('CellMirror_utils','CellMirror_methods.R'))

    spatial_cor<-read.csv('spatial_data_CID44971_cLDVAE_only.csv')
    rownames(spatial_cor)<-spatial_cor$X
    spatial_cor<-as.matrix(spatial_cor[,-1])

    singleCell_cor<-read.csv('singleCell_data_CID44971_cLDVAE_only.csv')
    rownames(singleCell_cor)<-singleCell_cor$X
    singleCell_cor<-as.matrix(singleCell_cor[,-1])

    mnn_res <- run_MNN(singleCell_cor, spatial_cor, k1 = 5, k2 = 50, ndist = global$mnn_ndist,subset_genes = colnames(spatial_cor))

***********************************************
Step5: Saving results aligned by CellMirror (R)
***********************************************

.. code-block:: R
    :linenos:

    write.csv(mnn_res$corrected,'spatial_data_CID44971_CellMirror.csv')
    write.csv(singleCell_cor, 'singleCell_data_CID44971_CellMirror.csv')

************************
Step6: Visualization (R)
************************

.. code-block:: R
    :linenos:

    library(Seurat)
    library(ggplot2)
    library(patchwork)
    library(stringr)
    library(magrittr)

    spatial_obj <- CreateSeuratObject(
    counts = Read10X( 
            data.dir = 'D:\\经统一班\\1A(2222479)论文记录\\汇报记录\\汇报2023年2月6日11点20分\\CID44971\\filtered_count_matrix', 
            gene.column=1, 
            cell.column=1),
    assay = 'Spatial'
    )

    spatial_image <- Read10X_Image(image.dir = 'D:\\经统一班\\1A(2222479)论文记录\\汇报记录\\汇报2023年2月6日11点20分\\CID44971\\spatial')

    image <- spatial_image[Cells(x = spatial_obj)]

    DefaultAssay(object = image) <- 'Spatial'

    spatial_obj[['Slice1']] <- image

    ann <- read.csv('C:\\Users\\我的电脑\\Desktop\\待办\\spatial_scRNA_CID44971_ann_en_nodes[200]_de_nodes[200]_cLDVAE_MNN_s_dim6_z_dim50_beta0.2_lr6e-06_time2023-04-02 02_33_27.537614.csv') %>% dplyr::filter(type=='Spatial')

    spatial_obj@meta.data$celltype <- ann$celltype_major

    celltypes <- c('T-cells','Cancer Epithelial','Myeloid','Endothelial','CAFs','PVL','Normal Epithelial','Plasmablasts','B-cells')

    spatial_obj@meta.data[,celltypes]<-0

    for (type in celltypes){
    for (i in 1:dim(spatial_obj@meta.data)[1]){
        
        s <- spatial_obj@meta.data[i,]$celltype
        
        if (grepl(type,s)==TRUE){
        spatial_obj@meta.data[i,type] <- as.double(substr(s,str_locate(s,type)[,2]+5,str_locate(s,type)[,2]+5+3))
        } 
        else{
        spatial_obj@meta.data[i,type] <- 0
        }
    }
    }

    slice<-names(spatial_obj@images)[1]

    spatial_coord <- data.frame(spatial_obj@images[[slice]]@coordinates) %>% tibble::rownames_to_column("barcodeID") %>% dplyr::mutate(imagerow_scaled = imagerow * spatial_obj@images[[slice]]@scale.factors$lowres, imagecol_scaled = imagecol *spatial_obj@images[[slice]]@scale.factors$lowres) 

    spatial_coord %<>% dplyr::left_join(spatial_obj@meta.data %>% tibble::rownames_to_column("barcodeID"), by = "barcodeID")

    spatial_coord <- dplyr::select(spatial_coord,-celltype)

    img <- png::readPNG('D:\\经统一班\\1A(2222479)论文记录\\汇报记录\\汇报2023年2月6日11点20分\\CID44971\\spatial\\tissue_lowres_image.png')

    img_grob <- grid::rasterGrob(img, interpolate = FALSE, width = grid::unit(1,"npc"), height = grid::unit(1, "npc"))

    suppressMessages(
                    ggplot2::ggplot() 
                    + ggplot2::annotation_custom(grob = img_grob,xmin = 0, xmax = ncol(img), ymin = 0, ymax = -nrow(img)) 
                    + scatterpie::geom_scatterpie(data = spatial_coord, ggplot2::aes(x = imagecol_scaled,y = imagerow_scaled), cols = celltypes, color = NA,alpha = 1, pie_scale = 0.5) 
                    + ggplot2::scale_y_reverse() 
                    + ggplot2::ylim(nrow(img), 0) 
                    + ggplot2::xlim(0, ncol(img)) 
                    + cowplot::theme_half_open(11,rel_small = 1) 
                    + ggplot2::theme_void()
                    + ggplot2::theme(plot.title = ggplot2::element_text(hjust=0.5))
                    + ggplot2::coord_fixed(ratio = 1,xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
                    + ggplot2::scale_fill_manual(values = c('T-cells'='#ff0000', 
                                                            'Cancer Epithelial'='#ff8033', 
                                                            'Myeloid'='#ffff00',
                                                            'CAFs'='#006400',
                                                            'Plasmablasts'='#00ff80',
                                                            'Endothelial'='#87ceeb',
                                                            'B-cells'='#800080',
                                                            'Normal Epithelial'='#191970',
                                                            'PVL'='#ff1493'))
                    + ggplot2::ggtitle("CID44971 CellMirror")
                    )

.. image:: ../Visualization_ST&scRNA_seq.jpg